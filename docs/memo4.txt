■プロジェクト計画立案
CICD自動検査環境構築のあたって、作業内容を把握し、その初期見積もりを実施し、作業計画を立てた。

■プロジェクト進捗管理
作業計画より遅延する場合や工数が増大する場合は、PLに早めに報告をあげて、PLと相談の上で必要な工数を見積もりした。

■開発効率向上
仕様が頻繁に変更になるため、凝集度や結合度に注意して、拡張しやすい実装を心掛けた。
ベースの実装では、手続き的な実装が多く、各機能の実装が分散しがちであったが、オブジェクト指向を使用することで、
各機能の実装がまとまり、コードの見通しがよくなった。

■品質向上
レビュー前にセルフチェックを行い、誤字・脱字のようなケアレスミスの指摘を受けないように対策した。
CICD自動検査環境のマニュアルのレビューの際は、1件のみ見であった。
(マニュアルはエクセルで作成され、7シートあり、各シートは100~500行程度)

■技術課題の抽出と対応
他チームで使用していた自動検査環境の機能と比較して、
・検査実行タイミングが、定期実行だけでなく、SVNのコミット検知による実行と手動実行可能
・実行開始や実行修了がTeamsに通知できる
・WEBブラウザから検査ログや進捗状況が確認できる

■技術課題の対応レベル
PAD内でJenkinsの使用例が少なく、技術的価値が高い。

■成果物の技術的価値
Jenkinsを用いて、SIF以外の他チームでも使用できるCICD自動検査環境を作成し、ユーザーマニュアルを作成した。
マニュアル作成後、電動化チームに使用してもらい、他チームでも使用できることを確認した。

=======

